<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTFs on Ling的博客</title>
    <link>https://blog.lty520.ml/ctf/</link>
    <description>Recent content in CTFs on Ling的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 17 Jan 2023 02:42:03 +0800</lastBuildDate><atom:link href="https://blog.lty520.ml/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WP BUUCTF 被嗅探的流量</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E8%A2%AB%E5%97%85%E6%8E%A2%E7%9A%84%E6%B5%81%E9%87%8F/</link>
      <pubDate>Tue, 17 Jan 2023 02:42:03 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E8%A2%AB%E5%97%85%E6%8E%A2%E7%9A%84%E6%B5%81%E9%87%8F/</guid>
      <description>题目链接: https://buuoj.cn/challenges#%E8%A2%AB%E5%97%85%E6%8E%A2%E7%9A%84%E6%B5%81%E9%87%8F
题目 某黑客潜入到某公司内网通过嗅探抓取了一段文件传输的数据，该数据也被该公司截获，你能帮该公司分析他抓取的到底是什么文件的数据吗？ 注意：得到的 flag 请包上 flag{} 提交
思路 下载后可得 被嗅探的流量.pcapng 文件，用 Wireshark 打开后翻翻翻，可以找到一条上传一张图片的流量
在这段流量的末尾可以发现 flag
可得 flag 为 flag{da73d88936010da1eeeb36e945ec4b97}
还好不用再提取出来上传的那张图片&amp;hellip; 野生锦依卫？？？</description>
    </item>
    
    <item>
      <title>WP BUUCTF 文件中的秘密</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%A7%98%E5%AF%86/</link>
      <pubDate>Tue, 17 Jan 2023 02:15:06 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%A7%98%E5%AF%86/</guid>
      <description>题目链接: https://buuoj.cn/challenges#%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%A7%98%E5%AF%86
题目 思路 在文件属性-详细信息-备注 中放着 flag flag{870c5a72806115cb5439345d8b014396}
又是用 binwalk，又是用 notepad++ ，结果这么简单&amp;hellip;（好熟悉的话）</description>
    </item>
    
    <item>
      <title>WP BUUCTF [第一章web入门]常见的搜集</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E7%AC%AC%E4%B8%80%E7%AB%A0web%E5%85%A5%E9%97%A8%E5%B8%B8%E8%A7%81%E7%9A%84%E6%90%9C%E9%9B%86/</link>
      <pubDate>Tue, 17 Jan 2023 01:57:18 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E7%AC%AC%E4%B8%80%E7%AB%A0web%E5%85%A5%E9%97%A8%E5%B8%B8%E8%A7%81%E7%9A%84%E6%90%9C%E9%9B%86/</guid>
      <description>题目链接: https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%80%E7%AB%A0%20web%E5%85%A5%E9%97%A8]%E5%B8%B8%E8%A7%81%E7%9A%84%E6%90%9C%E9%9B%86
题目 敏感文件 Hello, CTFer! 信息搜集之所以重要，是因为其往往会带给我们一些意想不到的东西
hack fun
very easy
思路 相关知识 常见的敏感文件
1、gedit备份文件，格式为filename~，比如index.php~ 2、vim备份文件，格式为.filename.swp或者*.swo或者*.swn，比如.index.php.swp 3、robots.txt 在 robots.txt 文件下可以得到
User-agent: * Disallow: /flag1_is_her3_fun.txt 在 flag1_is_her3_fun.txt 文件下可以得到
flag1:n1book{info_1 在 index.php~ 文件下可以得到
敏感文件 Hello, CTFer! 信息搜集之所以重要，是因为其往往会带给我们一些意想不到的东西 hack fun flag2:s_v3ry_im 在 .index.php.swp 文件下可以得到
flag3:p0rtant_hack} 拼接即可得 flag n1book{info_1s_v3ry_imp0rtant_hack}
好像可以用御剑来扫目录（没用过）</description>
    </item>
    
    <item>
      <title>WP BUUCTF [第一章web入门]粗心的小李</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E7%AC%AC%E4%B8%80%E7%AB%A0web%E5%85%A5%E9%97%A8%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E/</link>
      <pubDate>Tue, 17 Jan 2023 01:41:38 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E7%AC%AC%E4%B8%80%E7%AB%A0web%E5%85%A5%E9%97%A8%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E/</guid>
      <description>题目链接: https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%80%E7%AB%A0%20web%E5%85%A5%E9%97%A8]%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E
题目 看看能不能找到信息吧？ Git测试 Hello, CTFer! 当前大量开发人员使用 git 进行版本控制，对站点自动部署。如果配置不当，可能会将 .git 文件夹直接部署到线上环境。这就引起了git泄露漏洞。
小李好像不是很小心，经过了几次迭代更新就直接就把整个文件夹放到线上环境了:(
very easy
思路 提到了将 .git 文件上传到线上，并且可以找到 /.git/config 文件，由此可以确定 .git 文件夹的相对路径———和 index.html 在同一目录下。 使用工具 GitHack
python .\GitHack.py http://9bfa9908-0a98-4587-8547-08565c9261d1.node4.buuoj.cn:81/.git/ 即可得到一个 index.html 文件，打开即可得 flag n1book{git_looks_s0_easyfun}</description>
    </item>
    
    <item>
      <title>WP BUUCTF 面具下的flag</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E9%9D%A2%E5%85%B7%E4%B8%8B%E7%9A%84flag/</link>
      <pubDate>Mon, 16 Jan 2023 23:21:11 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E9%9D%A2%E5%85%B7%E4%B8%8B%E7%9A%84flag/</guid>
      <description>题目链接: https://buuoj.cn/challenges#%E9%9D%A2%E5%85%B7%E4%B8%8B%E7%9A%84flag
题目 思路 首先将文件用 binwalk 分解,可以分解出一个压缩包，通过伪加密的方式可以解开，解开后得到名为 flag.vmdk 的文件
在 kali 下使用 7z x 文件路径 可以解出
├── $RECYCLE.BIN │ └── S-1-5-21-2200156829-3544857562-508093875-1001 │ └── desktop.ini ├── key_part_one │ └── NUL ├── key_part_two │ ├── where_is_flag_part_two.txt │ └── where_is_flag_part_two.txt:flag_part_two_is_here.txt └── [SYSTEM] ├── $AttrDef ├── $BadClus ├── $Bitmap ├── $Boot ├── $Extend │ ├── $ObjId │ ├── $Quota │ ├── $Reparse │ └── $RmMetadata │ ├── $Repair │ ├── $Repair:$Config │ ├── $Txf │ └── $TxfLog │ ├── $Tops │ ├── $Tops:$T │ └── $TxfLog.</description>
    </item>
    
    <item>
      <title>WP BUUCTF 另外一个世界</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E4%B8%96%E7%95%8C/</link>
      <pubDate>Mon, 16 Jan 2023 22:36:08 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E4%B8%96%E7%95%8C/</guid>
      <description>题目链接: https://buuoj.cn/challenges#%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E4%B8%96%E7%95%8C
题目 思路 使用 Notepad++ 打开图片后即可在末尾找到一串特立独行的 01101011011011110110010101101011011010100011001101110011 使用工具 二进制与字符串互转 即可得到 koekj3s
可得 flag 为 flag{97314e7864a8f62627b26f3f998c37f1}</description>
    </item>
    
    <item>
      <title>WP BUUCTF 乌镇峰会种图</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E4%B9%8C%E9%95%87%E5%B3%B0%E4%BC%9A%E7%A7%8D%E5%9B%BE/</link>
      <pubDate>Sun, 15 Jan 2023 01:23:24 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E4%B9%8C%E9%95%87%E5%B3%B0%E4%BC%9A%E7%A7%8D%E5%9B%BE/</guid>
      <description>题目链接: https://buuoj.cn/challenges#%E4%B9%8C%E9%95%87%E5%B3%B0%E4%BC%9A%E7%A7%8D%E5%9B%BE
题目 思路 使用 Notepad++ 打开图片后即可在末尾找到 flag flag{97314e7864a8f62627b26f3f998c37f1}
又是用 binwalk，又是用 stegsolve，结果这么简单&amp;hellip;</description>
    </item>
    
    <item>
      <title>WP BUUCTF 信息化时代的步伐</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E4%BF%A1%E6%81%AF%E5%8C%96%E6%97%B6%E4%BB%A3%E7%9A%84%E6%AD%A5%E4%BC%90/</link>
      <pubDate>Sat, 14 Jan 2023 22:05:38 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E4%BF%A1%E6%81%AF%E5%8C%96%E6%97%B6%E4%BB%A3%E7%9A%84%E6%AD%A5%E4%BC%90/</guid>
      <description>题目链接: https://buuoj.cn/challenges#%E4%BF%A1%E6%81%AF%E5%8C%96%E6%97%B6%E4%BB%A3%E7%9A%84%E6%AD%A5%E4%BC%90
题目 也许中国可以早早进入信息化时代，但是被清政府拒绝了。附件中是数十年后一位伟人说的话的密文。请翻译出明文(答案为一串中文！) 注意：得到的 flag 请包上 flag{} 提交
606046152623600817831216121621196386
思路 相关知识 中文电码
中文电码，又称标准中文电码、中文商用电码、中文电报码或中文电报明码，原本是于电报之中传送中文信息的方法。它是第一个把汉字化作电子讯号的编码表。 中文电码表采用了四位阿拉伯数字作代号，从0001到9999按四位数顺序排列，用四位数字表示最多一万个汉字、字母和符号。汉字先按部首，后按笔划排列。字母和符号放到电码表的最尾。 所以使用工具 电报码在线翻译 很容易可以将 606046152623600817831216121621196386 翻译为计算机要从娃娃抓起
即可得 flag flag{计算机要从娃娃抓起}</description>
    </item>
    
    <item>
      <title>WP BUUCTF RSA</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-rsa/</link>
      <pubDate>Sat, 14 Jan 2023 21:56:08 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-rsa/</guid>
      <description>题目链接: https://buuoj.cn/challenges#RSA
题目 在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17 求解出d作为flga提交
思路 给 python3 环境安装上 libnum 包，然后运行脚本即可
import libnum p = 473398607161 q = 4511491 e = 17 phi = (p-1)*(q-1) d = libnum.invmod(e,phi) print(d) 可得 d 为 125631357777427553
即 flag 为 flag{125631357777427553}
脚本来源 『CTF』史上最全 RSA 题目总结 </description>
    </item>
    
    <item>
      <title>WP BUUCTF Zip伪加密</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-zip%E4%BC%AA%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Sat, 14 Jan 2023 01:52:14 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-zip%E4%BC%AA%E5%8A%A0%E5%AF%86/</guid>
      <description>题目 注意：得到的 flag 请包上 flag{} 提交 以及一个解压需要密码的 zip 压缩包
思路 既然题目叫Zip伪加密,那么就从Zip伪加密入手（废话文学.jpg）
相关知识 zip文件头协议(部分)
压缩源文件数据区： 50 4B 03 04：这是头文件标记（0x04034b50） 14 00：解压文件所需 pkware 版本 00 00：全局方式位标记（有无加密） 08 00：压缩方式 5A 7E：最后修改文件时间 F7 46：最后修改文件日期 16 B5 80 14：CRC-32校验（1480B516） 19 00 00 00：压缩后尺寸（25） 17 00 00 00：未压缩尺寸（23） 07 00：文件名长度 00 00：扩展记录长度 压缩源文件目录区： 50 4B 01 02：目录中文件文件头标记(0x02014b50) 3F 00：压缩使用的 pkware 版本 14 00：解压文件所需 pkware 版本 00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了） 08 00：压缩方式 5A 7E：最后修改文件时间 F7 46：最后修改文件日期 16 B5 80 14：CRC-32校验（1480B516） 19 00 00 00：压缩后尺寸（25） 17 00 00 00：未压缩尺寸（23） 07 00：文件名长度 24 00：扩展字段长度 00 00：文件注释长度 00 00：磁盘开始号 00 00：内部文件属性 20 00 00 00：外部文件属性 00 00 00 00：局部头部偏移量 压缩源文件目录结束标志： 50 4B 05 06：目录结束标记 00 00：当前磁盘编号 00 00：目录区开始磁盘编号 01 00：本磁盘上纪录总数 01 00：目录区中纪录总数 59 00 00 00：目录区尺寸大小 3E 00 00 00：目录区对第一张磁盘的偏移量 00 00：ZIP 文件注释长度 如上所述，只要将第二个50 4B后的09 00改为00 00即可</description>
    </item>
    
    <item>
      <title>WP BUUCTF 隐藏的钥匙</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E9%9A%90%E8%97%8F%E7%9A%84%E9%92%A5%E5%8C%99/</link>
      <pubDate>Sat, 14 Jan 2023 01:44:31 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E9%9A%90%E8%97%8F%E7%9A%84%E9%92%A5%E5%8C%99/</guid>
      <description>题目 思路 使用 Notepad++ 打开后搜索 flag 即可找到被 Base64 编码后的信息 flag:base64:(Mzc3Y2JhZGRhMWVjYTJmMmY3M2QzNjI3Nzc4MWYwMGE=)
使用 Base64 解码后即可得到 flag flag{377cbadda1eca2f2f73d36277781f00a}</description>
    </item>
    
    <item>
      <title>WP BUUCTF 大白</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E5%A4%A7%E7%99%BD/</link>
      <pubDate>Sat, 14 Jan 2023 01:09:55 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E5%A4%A7%E7%99%BD/</guid>
      <description>题目链接: https://buuoj.cn/challenges#%E5%A4%A7%E7%99%BD
题目 看不到图？ 是不是屏幕太小了 注意：得到的 flag 请包上 flag{} 提交
思路 题目中提到了看不到图以及屏幕太小了,再加上题目给了一张 png 图片，由此可以猜到这题修改了图片的长或宽，让设备只能显示图片的一部分，从而隐藏了 flag
使用脚本
import zlib import struct filename = &amp;#39;2.png&amp;#39; with open(filename, &amp;#39;rb&amp;#39;) as f: all_b = f.read() crc32key = int(all_b[29:33].hex(), 16) data = bytearray(all_b[12:29]) n = 4095 # 理论上0xffffffff,但考虑到屏幕实际/cpu，0x0fff就差不多了 for w in range(n): # 高和宽一起爆破 width = bytearray(struct.pack(&amp;#39;&amp;gt;i&amp;#39;, w)) # q为8字节，i为4字节，h为2字节 for h in range(n): height = bytearray(struct.pack(&amp;#39;&amp;gt;i&amp;#39;, h)) for x in range(4): data[x + 4] = width[x] data[x + 8] = height[x] crc32result = zlib.</description>
    </item>
    
    <item>
      <title>WP BUUCTF Alice与Bob</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-alice%E4%B8%8Ebob/</link>
      <pubDate>Fri, 13 Jan 2023 02:05:24 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-alice%E4%B8%8Ebob/</guid>
      <description>题目链接: https://buuoj.cn/challenges#Alice%E4%B8%8EBob
题目 密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数:98554799767,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。 注意：得到的 flag 请包上 flag{} 提交
思路 去掉阅读短文似的没用的信息，即先分解质因数，再求md5即可
使用 整数分解工具 将 98554799767 分解为 101999 和 966233 求 101999966233 的 md5 结果，为 d450209323a847c8d01c6be47c81811a 可得 flag 为 flag{d450209323a847c8d01c6be47c81811a}</description>
    </item>
    
    <item>
      <title>WP BUUCTF 丢失的MD5</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E4%B8%A2%E5%A4%B1%E7%9A%84md5/</link>
      <pubDate>Fri, 13 Jan 2023 00:32:23 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E4%B8%A2%E5%A4%B1%E7%9A%84md5/</guid>
      <description>题目链接: https://buuoj.cn/challenges#%E4%B8%A2%E5%A4%B1%E7%9A%84MD5
题目 import hashlib for i in range(32,127): for j in range(32,127): for k in range(32,127): m=hashlib.md5() m.update(&amp;#39;TASC&amp;#39;+chr(i)+&amp;#39;O3RJMV&amp;#39;+chr(j)+&amp;#39;WDJKX&amp;#39;+chr(k)+&amp;#39;ZM&amp;#39;) des=m.hexdigest() if &amp;#39;e9032&amp;#39; in des and &amp;#39;da&amp;#39; in des and &amp;#39;911513&amp;#39; in des: print des 思路 遇到 python 题目，当然是要先运行一下啦
报错
仔细研究后发现这 TM 居然是 python2 的题目&amp;hellip;
只要装上 python2 环境，运行一下，可以得到一串字符串，包上 flag{} 即可
所以 flag 就为 flag{e9032994dabac08080091151380478a2}
结果这题的大部分时间都用在了装 python2 环境上了&amp;hellip;</description>
    </item>
    
    <item>
      <title>WP BUUCTF 篱笆墙的影子</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E7%AF%B1%E7%AC%86%E5%A2%99%E7%9A%84%E5%BD%B1%E5%AD%90/</link>
      <pubDate>Fri, 13 Jan 2023 00:09:44 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E7%AF%B1%E7%AC%86%E5%A2%99%E7%9A%84%E5%BD%B1%E5%AD%90/</guid>
      <description>题目链接: https://buuoj.cn/challenges#%E7%AF%B1%E7%AC%86%E5%A2%99%E7%9A%84%E5%BD%B1%E5%AD%90
题目 felhaagv{ewtehtehfilnakgw}
思路 题目提到了篱笆墙，这篱笆不就是栅栏嘛
尝试一下栅栏密码，成功
每两个为一组
可得 flag 为 flag{wethinkwehavetheflag}
做到一半发现 ubuntu 的 python 环境炸了&amp;hellip;头秃</description>
    </item>
    
    <item>
      <title>WP BUUCTF [极客大挑战2019]Http</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019http/</link>
      <pubDate>Thu, 12 Jan 2023 01:05:28 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019http/</guid>
      <description>题目链接: https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]Http
题目 一个网站
思路 题目给了一个网站，在网页源码里可以找到一句
&amp;lt;a style=&amp;ldquo;border:none;cursor:default;&amp;rdquo; onclick=&amp;ldquo;return false&amp;rdquo; href=&amp;ldquo;Secret.php&amp;rdquo;&amp;gt;
可以猜到题目和 Secret.php 有关
打开后即可按照题目提示分别加上三个请求头:
Referer:https://Sycsecret.buuoj.cn User-Agent:Syclover X-Forwarded-For:127.0.0.1 import httpx url = &amp;#39;http://node4.buuoj.cn:27094/Secret.php&amp;#39; headers = {&amp;#34;Referer&amp;#34;:&amp;#34;https://Sycsecret.buuoj.cn&amp;#34;,&amp;#34;User-Agent&amp;#34;:&amp;#34;Syclover&amp;#34;,&amp;#34;X-Forwarded-For&amp;#34;:&amp;#34;127.0.0.1&amp;#34;} r = httpx.get(url,headers=headers) print(r.text) 可得 flag 为 flag{10b601e9-9ce4-4abc-b69d-32123353d17e}
见了鬼了，用 Postman 死活不行&amp;hellip;还得是 Python</description>
    </item>
    
    <item>
      <title>WP BUUCTF [极客大挑战2019]Knife</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019knife/</link>
      <pubDate>Thu, 12 Jan 2023 00:38:56 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019knife/</guid>
      <description>题目链接: https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]Knife
题目 打开靶机，给了两句话
我家菜刀丢了，你能帮我找一下么
eval($_POST[&amp;ldquo;Syc&amp;rdquo;]);
思路 题目提到了菜刀,所以选择蚁剑（主要是电脑上没有菜刀2333）
很简单，一步到位
在网站根目录下可以找到名为 flag 的文件，可得 flag 为 flag{20d3c2b8-71fa-41fa-a8f6-fc7bcd5f8137}</description>
    </item>
    
    <item>
      <title>WP BUUCTF Quoted Printable1</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-quoted-printable1/</link>
      <pubDate>Thu, 12 Jan 2023 00:03:27 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-quoted-printable1/</guid>
      <description>题目链接: https://buuoj.cn/challenges#Quoted-printable
题目 =E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6
思路 没啥思路，尝试了一下，并不是16进制
尝试扔到 CyberChef 里，居然解出来了
flag 为 flag{那你也很棒哦}
查了一下，这东西叫 Quoted-printable ，可译为可打印字符引用编码或使用可打印字符的编码
将8-bit字节值可编码为3个字符：一个等号“=”后跟随两个十六进制数字（0–9或A–F）表示该字节的数值。 所以还是16进制&amp;hellip;这点并没有猜错 2333
Quoted-printable 维基百科</description>
    </item>
    
    <item>
      <title>WP BUUCTF LSB1</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-lsb1/</link>
      <pubDate>Tue, 10 Jan 2023 20:45:12 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-lsb1/</guid>
      <description>题目链接: https://buuoj.cn/challenges#LSB
题目 思路 因为题目名为 LSB ，并且给了张图，使用工具 Stegsolve 可以看到 在 R、G、B 三个通道的第0位的图片上方有一些马赛克（和图片肉眼看到的白色不符），使用 Data Extract 功能，分别选择 R、G、B 三个通道的第0位、Row、LSB First、RGB 排列方式，保存为一张图片。
扫码即可得 cumtctf{1sb_i4_s0_Ea4y}
但是，这不是 flag ！（被坑了）
flag 为 flag{1sb_i4_s0_Ea4y}
发现了个名为 LSB_hide 的软件，好像很好用的样子，但是7G内存不够它用的 QAQ</description>
    </item>
    
    <item>
      <title>WP BUUCTF Rabbit</title>
      <link>https://blog.lty520.ml/ctf/wp-buuctf-rabbit/</link>
      <pubDate>Tue, 10 Jan 2023 20:26:12 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buuctf-rabbit/</guid>
      <description>题目链接: https://buuoj.cn/challenges#Rabbit
题目 U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI
思路 因为题目名为 Rabbit ，以及给到的密文是 U2 开头，使用工具 https://www.sojson.com/encrypt_rabbit.html 可以解得 Cute_Rabbit ，所以 flag 即为 flag{Cute_Rabbit}
没搞明白 CyberChef 咋用，还要 Key ，lv 啥的，明明别的直接就可以，怪</description>
    </item>
    
    <item>
      <title>WP BUUCUF Password</title>
      <link>https://blog.lty520.ml/ctf/wp-buucuf-password/</link>
      <pubDate>Tue, 10 Jan 2023 20:13:06 +0800</pubDate>
      
      <guid>https://blog.lty520.ml/ctf/wp-buucuf-password/</guid>
      <description>题目链接: https://buuoj.cn/challenges#password
题目 姓名：张三 生日：19900315
key 格式为 key{xxxxxxxxxx}
思路 因为 x 为10位，张三为两个字的名字，生日占8位，因此可以猜到 flag
为 key{zs19900315}
所以&amp;quot;注意：得到的 flag 请包上 flag{} 提交&amp;quot;是闹那样&amp;hellip;&amp;quot;</description>
    </item>
    
  </channel>
</rss>
